create or replace FUNCTION CREATE_MULTI_SDFILE 
(
  P_IN_TEMP_TABLE_NAME IN VARCHAR2,
  P_IN_ID_FIELD_NAME IN VARCHAR2,
  P_IN_DIRECTORY_NAME IN VARCHAR2,
  P_IN_SDFILE_NAME in VARCHAR2
) RETURN VARCHAR2 
AS 

  V_QUERY_SQL VARCHAR2(120);

  V_MOL_CLOB CLOB;
  V_MOL_ID NEWDB_2D_MOLTABLE.ID%TYPE;

  V_SDFILE_HANDLE UTL_FILE.FILE_TYPE;
  C_LINE_LENGTH INT := 1240;
  V_FILE_NAME VARCHAR2(512);
  V_CURRENT_POSITION INT :=1;
  V_MOL_LENGTH INT;
  V_WROTE_CLASS_DATA BOOLEAN := FALSE;
  V_WROTE_SYNONYM_DATA BOOLEAN := FALSE;
  V_WROTE_REG_DATA BOOLEAN;

  C_DATASOURCE_IDENTIFIER_FIELD VARCHAR2(64) := '> <PUBCHEM_EXT_DATASOURCE_NAME>';
  C_DATASOURCE_IDENTIFIER VARCHAR2(16) := 'ChemIDplus';
  C_DATASOURCE_REFERENCE_FIELD VARCHAR2(32) := '> <PUBCHEM_EXT_DATASOURCE_REGID>';
  C_COMMENT_FIELD VARCHAR2(30) := '> <PUBCHEM_SUBSTANCE_COMMENT>';

  C_NAMES_FIELD VARCHAR2(30) := '> <PUBCHEM_SUBSTANCE_SYNONYM>';
  C_DATASOURCE_URL_FIELD VARCHAR2(30) := '> <PUBCHEM_EXT_DATASOURCE_URL>';
  C_DATASOURCE_URL VARCHAR2(40) := 'http://chem.sis.nlm.nih.gov/chemidplus/';

  C_SPECIFIC_URL_FIELD  VARCHAR2(32) := '> <PUBCHEM_EXT_SUBSTANCE_URL>';
  C_SPECIFIC_URL  VARCHAR2(75) := 'http://chem.sis.nlm.nih.gov/chemidplus/rn/';

  C_REG_NUMBERS_FIELD VARCHAR2(64) := '> <PUBCHEM_GENERIC_REGISTRY_NAME>';

  --Cursors for the sub queries we run on individual data tables:
  CURSOR CUR_NUMBER(P_SUPERLISTID VARCHAR) IS 
    SELECT MEMDATA FROM CHEMID.TBL_NUMBER 
    WHERE TXTSUPERLISTID = P_SUPERLISTID AND INTELEMENTTYPE NOT IN (610, 980);
  V_NUMBER_REC CUR_NUMBER%ROWTYPE;

  CURSOR CUR_NUMBER_ASSOC(P_SUPERLISTID VARCHAR) IS 
    SELECT MEMDATA FROM CHEMID.TBL_NUMBER 
    WHERE TXTSUPERLISTID = P_SUPERLISTID AND INTELEMENTTYPE IN (610, 980);
  
  CURSOR CUR_NAME(P_SUPERLISTID VARCHAR) IS 
    SELECT MEMDATA FROM CHEMID.TBL_NAME 
    WHERE TXTSUPERLISTID = P_SUPERLISTID;
  V_NAME_REC CUR_NAME%ROWTYPE;

  CURSOR CUR_CLASS(P_SUPERLISTID VARCHAR) IS 
    SELECT '[' || E.TXTELEMENTNAME || '] ' || N.MEMDATA AS MEMDATA FROM CHEMID.TBL_NUMBER N, CHEMID.TBL_ELEMENT_TYPE E
    WHERE TXTSUPERLISTID=P_SUPERLISTID AND N.INTELEMENTTYPE =E.INTELEMENT
    AND N.INTELEMENTTYPE IN (610, 980)
    UNION
    SELECT MEMDATA FROM CHEMID.TBL_CLASS_CODE 
    WHERE TXTSUPERLISTID = P_SUPERLISTID;
  V_CLASS_REC CUR_CLASS%ROWTYPE;

  V_STR_QUERY_START VARCHAR2(128) := 'select molfile(ctab), ID from NEWDB_2D_MOLTABLE where ID = ''';
  TYPE STR_TABLE_CURSOR_TYPE  IS REF CURSOR;
  STR_TABLE_CURSOR  STR_TABLE_CURSOR_TYPE;

  type INPUT_DATA_CURSOR_TYPE IS REF CURSOR;
  INPUT_DATA_CURSOR INPUT_DATA_CURSOR_TYPE;

  V_STRUCTURE_DATA_PRESENT boolean;

  V_MAIN_QUERY VARCHAR2(256);
  V_ID CHAR(10);
BEGIN
  --BUILD query to get data
  DBMS_OUTPUT.ENABLE;
  --DBMS_OUTPUT.DISABLE;

  V_SDFILE_HANDLE := UTL_FILE.FOPEN( P_IN_DIRECTORY_NAME, P_IN_SDFILE_NAME , 'W', 
    C_LINE_LENGTH);

  DBMS_OUTPUT.PUT_LINE('Opened SD file' || P_IN_SDFILE_NAME);

  V_MAIN_QUERY:= 'select ' || P_IN_ID_FIELD_NAME || ' FROM ' || P_IN_TEMP_TABLE_NAME;
  DBMS_OUTPUT.PUT_LINE('V_MAIN_QUERY: ' || V_MAIN_QUERY);
  
  OPEN INPUT_DATA_CURSOR FOR V_MAIN_QUERY;
  LOOP
    FETCH INPUT_DATA_CURSOR INTO V_ID;
    EXIT WHEN INPUT_DATA_CURSOR%NOTFOUND;
    V_WROTE_CLASS_DATA := FALSE;
    V_WROTE_SYNONYM_DATA := FALSE;
    V_WROTE_REG_DATA  := FALSE;

    V_QUERY_SQL := V_STR_QUERY_START || V_ID || '''';
    dbms_output.put_line('create_multi_sdfile to use structure SQL: ' ||V_QUERY_SQL);
    OPEN STR_TABLE_CURSOR FOR V_QUERY_SQL;

    FETCH STR_TABLE_CURSOR INTO V_MOL_CLOB, V_MOL_ID;
    V_STRUCTURE_DATA_PRESENT := NOT STR_TABLE_CURSOR%NOTFOUND;

    if V_STRUCTURE_DATA_PRESENT then
      --Write out the molfile first
      V_MOL_LENGTH := DBMS_LOB.GETLENGTH(V_MOL_CLOB);
      V_CURRENT_POSITION :=1;
      dbms_output.put_line('V_MOL_LENGTH = ' || to_char(V_MOL_LENGTH ));
      WHILE V_CURRENT_POSITION < V_MOL_LENGTH
      LOOP
        UTL_FILE.PUT(V_SDFILE_HANDLE,DBMS_LOB.SUBSTR(V_MOL_CLOB, C_LINE_LENGTH, V_CURRENT_POSITION));
        UTL_FILE.FFLUSH(V_SDFILE_HANDLE);
        V_CURRENT_POSITION := V_CURRENT_POSITION + C_LINE_LENGTH;
        dbms_output.put_line('V_CURRENT_POSITION = ' || to_char(V_CURRENT_POSITION ));
      END LOOP;
      --blank lines after the molfile cause problems in some readers
      if MOD(V_MOL_LENGTH,C_LINE_LENGTH) = 1 then
        UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');
      end if;
    else
      --create a no-struct
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, '');
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, '  ACCLDraw11121818482D');
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, '');
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, '  0  0  0  0  0  0  0  0  0  0999 V2000');
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, 'M  END');
    end if;

    -- now, some fixed information
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_DATASOURCE_REFERENCE_FIELD);
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, V_ID);
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');

    --fetch classification codes
    OPEN CUR_CLASS(V_ID);
    LOOP
      FETCH CUR_CLASS INTO V_CLASS_REC;
      EXIT WHEN CUR_CLASS%NOTFOUND;
      IF( NOT V_WROTE_CLASS_DATA) THEN
        UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_COMMENT_FIELD);
        V_WROTE_CLASS_DATA := TRUE;
      END IF;
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, V_CLASS_REC.MEMDATA);
    END LOOP;
    CLOSE CUR_CLASS;

    IF( V_WROTE_CLASS_DATA) THEN
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');
    END IF;

    --fetch 'numbers' -- identifiers
    OPEN CUR_NUMBER(V_ID);
    LOOP
      FETCH CUR_NUMBER INTO V_NUMBER_REC;
      EXIT WHEN CUR_NUMBER%NOTFOUND;
      IF( NOT V_WROTE_SYNONYM_DATA) THEN
        UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_NAMES_FIELD);
        V_WROTE_SYNONYM_DATA := TRUE;
      END IF;
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, V_NUMBER_REC.MEMDATA);
    END LOOP;
    CLOSE CUR_NUMBER;

    --fetch NAMES/synonyms
    OPEN CUR_NAME(V_ID);
    LOOP
      FETCH CUR_NAME INTO V_NAME_REC;
      EXIT WHEN CUR_NAME%NOTFOUND;
      IF( NOT V_WROTE_SYNONYM_DATA) THEN
        UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_NAMES_FIELD);
        V_WROTE_SYNONYM_DATA := TRUE;
      END IF;
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE,V_NAME_REC.MEMDATA);
    END LOOP;
    CLOSE CUR_NAME;

    IF( v_wrote_synonym_data ) THEN
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');
    END IF;

    --fetch 'numbers' -- identifiers A second time!
    OPEN CUR_NUMBER(V_ID);
    LOOP
      FETCH CUR_NUMBER INTO V_NUMBER_REC;
      EXIT WHEN CUR_NUMBER%NOTFOUND;
      IF( NOT V_WROTE_REG_DATA) THEN
        UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, c_reg_numbers_field);
        V_WROTE_REG_DATA := TRUE;
      END IF;
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, V_NUMBER_REC.MEMDATA);
    END LOOP;
    CLOSE CUR_NUMBER;

    IF( v_wrote_reg_data ) THEN
      UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');
    END IF;

    --fixed data at the end of the file
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_DATASOURCE_URL_FIELD );
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_DATASOURCE_URL );
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');

    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_SPECIFIC_URL_FIELD );
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, C_SPECIFIC_URL || V_ID );
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, ' ');
    UTL_FILE.PUT_LINE(V_SDFILE_HANDLE, '$$$$');
  END LOOP;
  UTL_FILE.FCLOSE(V_SDFILE_HANDLE);

  RETURN 'SUCCESS';

EXCEPTION

  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(' Error in Create_multi_Sdfile2: ' || SQLERRM);
    IF( UTL_FILE.IS_OPEN(V_SDFILE_HANDLE)) THEN
      UTL_FILE.FCLOSE(V_SDFILE_HANDLE);
    END IF;
    RETURN SQLERRM;

END CREATE_MULTI_SDFILE;